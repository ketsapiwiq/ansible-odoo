# SYSTEM

- name: Ensure git package is present
  apt:
    name: git
    state: present

- name: Add Odoo group
  group:
    name: odoo
    system: yes
    state: present
    gid: 10001
  tags:
    - odoo_user
    - odoo_install

- name: Add Odoo user
  user:
    name: odoo
    group: odoo
    create_home: no
    system: yes
    state: present
    uid: 10001
  tags:
    - odoo_user
    - odoo_install


# CODE

- name: Ensure Coopaname Odoo directories are present
  file:
    path: "{{ item }}"
    state: directory
    owner: odoo
    group: odoo
  loop:
    - "{{ odoo_project_path }}"
    - "{{ odoo_project_path }}/config"
    - "{{ odoo_project_path }}/data_dir"
    - "{{ odoo_project_path }}/addons"
  tags:
    - odoo_install
    - odoo_download_template
  notify: Restart Odoo


# ADDONS

- name: Get Coopaname addons code diffs since last git commit
  command:
    cmd: git status --porcelain
    chdir: "{{ odoo_coopaname_addons_path }}"
  register: odoo_coopaname_addons_git
  become: yes
  changed_when: odoo_coopaname_addons_git.stdout_lines | length > 0
  failed_when: odoo_coopaname_addons_git.stdout_lines | length > 0
  ignore_errors: yes
  check_mode: false
  tags: odoo_git

- name: Print Coopaname addons code diffs since last git commit
  debug:
    msg: "{{ odoo_coopaname_addons_git.stdout_lines }}"
  ignore_errors: yes

# Stash changes on test_compta then reapply them on top
- name: Stash changes when required in Coopaname addons code
  command:
    cmd: 'git stash push --all --message "Automatic stash by Ansible"'
    chdir: "{{ odoo_coopaname_addons_path }}"
  when: odoo_coopaname_addons_stash
  ignore_errors: yes

- name: Ensure Odoo addons for Coopaname code present and up to date
  git:
    dest: "{{ odoo_coopaname_addons_path }}"
    repo: https://{{ odoo_coopaname_addons_gitlab_token_username }}:{{ odoo_coopaname_addons_gitlab_token_secret }}@{{ odoo_coopaname_addons_repo_address }}
    version: "{{ odoo_coopaname_addons_repo_version }}"
    # update: no
    update: yes
    clone: yes
    # TODO: Variabilize force:yes or no and can_fail
    force: no
#   ignore_errors: yes
  become: yes
  tags: odoo_install,odoo_git,odoo_install_coopaname_addons
  notify: Restart Odoo

- name: Pop changes from stash when required
  command:
    cmd: git stash pop
    chdir: "{{ odoo_coopaname_addons_path }}"
  when: odoo_coopaname_addons_stash
  ignore_errors: yes

- name: Ensure Odoo addons for CAE code present and up to date
  git:
    dest: "{{ odoo_project_path }}/addons/addons-cae"
    repo: https://{{ odoo_coopaname_addons_gitlab_token_username }}:{{ odoo_coopaname_addons_gitlab_token_secret }}@gitlab.com/coopaname/odoo-cae-hr.git
    version: "12.0-coopaname"
    # update: no
    update: yes
    clone: yes
    force: no
  become: yes
  tags: odoo_install,odoo_git,odoo_install_coopaname_addons,odoo_install_addons_cae
  when: odoo_addons_cae_enabled is defined and odoo_addons_cae_enabled == True
  notify: Restart Odoo

- name: "Import extra addons"
  import_tasks: extra_addons.yml
  become: yes
  tags:
    - odoo_install
    - odoo_addons
    - odoo_extra_addons
  when: odoo_extra_addons

- name: Ensure Odoo code belongs to odoo user and group
  file:
    state: directory
    path: "{{ odoo_project_path }}"
    recurse: yes
    owner: odoo
    group: odoo
    mode: "u=rwX,g=rX,o=rX"
  become: yes
  tags:
    - odoo_install
  notify: Restart Odoo


# CONFIG

- name: Configure odoo docker-compose installation
  template:
    src: docker-compose.yml.j2
    dest: "{{ odoo_project_path }}/docker-compose.yml" # required. Location to render the template to on the remote machine.
  become: yes
  notify: Recreate Odoo
  tags:
    - odoo_install
    - odoo_docker_compose
    - odoo_config

- name: Replace vars in Odoo config template
  template:
    src: odoo.conf.j2
    dest: "{{ odoo_project_path }}/config/odoo.conf" 
  become: yes
  no_log: true
  notify: Restart Odoo
  tags:
    - odoo_config
    - odoo_install


# IMAGE

- name: Log into Container registry
  docker_login:
    registry_url: "{{ odoo_registry_url }}"
    username: "{{ odoo_env_gitlab_token_username }}"
    password: "{{ secret_odoo_env_gitlab_token_secret }}"
  become: yes
  tags:
    - odoo_install

- name: Pull latest docker image from Container registry
  docker_image:
    name: "{{ odoo_registry_image }}:{{ odoo_registry_image_version }}"
    source: pull
    force_source: true
  # async: 600 # wait for completion 10min

  become: yes
  tags:
    - odoo_install
  notify: Recreate Odoo

# DB

- name: Import odoo restore database tasks
  import_tasks: db_restore/main.yml
  when:
  - odoo_db_restore == True
  tags:
    - odoo_install
    - odoo_db

- name: Test connection to Postgres from Odoo host
  postgresql_query:
    query: SELECT version()
    db: "postgres"
    login_host: "{{ odoo_db_host }}"
    login_user: "{{ odoo_db_user }}"
    port: "{{ odoo_db_port }}"
    login_password: "{{ secret_odoo_db_password }}"
  become: yes
  no_log: yes
  # delegate_facts: yes
  # delegate_to: "{{ odoo_db_ansible_host }}"

# FILESTORE

- name: Import filestore tasks (only copy latest version when adequate var odoo_filestore_restore is set to yes)
  import_tasks: filestore.yml
  become: yes
  tags:
    - odoo_install
    - odoo_filestore

# DB TWEAKS: delete mailserver, change uuid, change admin password

- name: Import db tweaks tasks (delete mailserver, change uuid, change admin password...)
  import_tasks: db_tweaks.yml
  become: yes
  tags:
    - odoo_install
    - odoo_db_tweaks
    - odoo_change_admin_password
    - odoo_remove_mailservers
    - odoo_random_uuid


# SESSIONS

# TODO: Purge sessions or sync them from prod?
# TODO: Will need to adapt this when using Redis sessions
- name: Delete Odoo sessions folder
  file:
    state: absent
    path: "{{ odoo_sessions_path }}"
  become: yes
  diff: false
  when: odoo_purge_sessions is defined and odoo_purge_sessions == True
  tags: odoo_purge_sessions

- name: Recreate Odoo sessions folder
  file:
    state: directory
    path: "{{ odoo_sessions_path }}"
    owner: odoo
    group: odoo
  become: yes
  when: odoo_purge_sessions is defined and odoo_purge_sessions == True
  tags: odoo_purge_sessions


# MODULES

- name: Import modules tasks
  import_tasks: modules.yml
  become: yes
  tags:
    - odoo_install
    - odoo_modules


# TODO: Ajout de healthcheck et rollback si pb ?

# - name: Check if nginx-proxy is healthy
#   docker_container_info:
#     name: nginx-proxy
#   register: result

# - name: Print information about container nginx-proxy
#   debug:
#     var: result.container.State.Health.Status == "healthy"
#   when: result.exists

# CONTAINERS

- name: Ensure Odoo container is started
  docker_compose:
    stopped: no
    # this is done by handlers
    restarted: no
    # Default, only if definition changed
    recreate: smart
    timeout: 600
    state: present
    remove_orphans: yes
    project_src: "{{ odoo_project_path }}"
  environment:
  - COMPOSE_HTTP_TIMEOUT=600
  - DOCKER_CLIENT_TIMEOUT=600
  become: yes
  tags:
    - odoo_start
    - odoo_modules

- name: Prune dangling (untagged) images
  become: yes
  docker_prune:
    containers: no
    images: yes
    networks: no # it could
    volumes: no
    builder_cache: no
    # this would also remove any unused image
    # images_filters:
    #   dangling: false
  tags: docker_prune